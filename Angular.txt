Install angular - cli (command line interface)

npm install -g @angular/cli

============================================
Angular-cli commands

ng new application-name options

application-name
	1. application name must start with an alphabet
	2. if you want to separate two words, you cannot use underscore ( _ ), use - instead
	3. after separating words, you can only start another word with an alphabet

for options - ng new --help

--inline-styles
--inline-template
--skip-tests
--skip-git
--skip-install
--directory
--style

===========================================================================
Angular cli commands

for help with options in any command just write the command and --help
example: ng generate --help 
		- this will output all the options available with ng generate command
	
	ng generate component --help
		- this will output all the options available with ng generate component command

ng serve
	start the application
	start local server on default port (4200)

ng generate component component_name _options_

ng generate service service_name

==============================================================================
Things working behind

gulp/grunt
	task runners
webpack
	module bundler
webpack-dev-server
	local development server


==============================================================================

//class decorator

It is used to create a module, it makes a class behave as a module

@NgModule({
	imports: [ //modules ],
	declarations: [ //remianing things - components, pipes, directives ],
	providers: [ //services ],

	//bootstrap here means initial
	bootstrap: [],
	entryComponents: [],
	exports: []
})

//class decorator

it is used to create a component, it makes a class behave as a component
@Component({
	selector: '',
	templateUrl: ''
})

=============================================================================

data-binding
	1. One-way binding
		- interpolation - component ==> view
			syntax - {{ property_name }}
		- property binding - component ==> view
			syntax - <a [href]="property_name"></a>
		- event binding view ==> component
			syntax - <button (click)="expression"></button>

	2. Two-way binding
		- component <==> view

=============================================================================

in-built-directives
	1. Structural directives - which can remove or create structure of an element or templte inside DOM
		- *ngIf Then Else
		- *ngFor Of
		- ngSwitch { *ngSwitchCase and *ngSwitchDefault }

	2. Attribute directives - works on value or properties of element
		- ngModel
		- ngClass
		- ngStyle


===============================================================================

data-sharing between related components, two components are in direct relation when we place a component selector in other component's view

	inputs - inputs can be provided to a component's instance using property binding which can be received in the component
		- inputs which has to be received in a component can be declared inside component decorator's inputs array or we can also decorate a property using Input decorator

	outputs - outputs can be received from a component's instance which can be sent by the component using custom event.
		- outputs which has to be sent from the component can be declared inside component decorator's outputs array or we can also decorate a property using Output decorator
		- Custom events is an instance of EventEmitter class which can be imported from @angular/core;
		- A custom event can be triggered by calling emit() method that custom event.

===============================================================================

Services
	- services are injectable i.e., we can inject services inside components that is known as dependency injection
	- whenever a service is injected, that dependency injection searches for providers (providers tells how a service will work)
	- service class have a singleton instance, i.e., all components will refer to the same instance of service hence can be used for data-sharing
	- services may also have more than one instance which depends where you inject that service.
	- services can be injected in service themselves in Injectable, Component - providers and viewProviders array, NgModule - providers, Directives - Providers

=================================================================================

Forms	- FormsModule

	template-driven forms
	
		form - ngForm - FormGroup
			- inputs - ngModel - FormControl

		states
			- touched
			- untouched - default

			- dirty
			- pristine - default

			- invalid
			- valid

================================================================================

API integration

	HTTP service
		- Angular 2, 4, 5 { deprecated in Angular 5 }

	HTTP client service
		- Angular 5, 6

===============================================================================

RouterModule

	directives
		- routerLink
		- routerLinkActive

	path configuration	
		- path
		- redirectTo
		- pathMatch
		- component
		- children
		- loadChildren

	routing through component using router service

	retreive route info from ActivatedRoute Service